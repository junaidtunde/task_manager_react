{"version":3,"sources":["../server/routes.js"],"names":["routes","verifyToken","req","res","next","bearerHeader","headers","jwt","verify","process","env","SECRET_KEY","err","data","db","User","findById","user","then","status","json","message","catch","verifyAdmin","Admin","admin","get","post","controllers","userController","loginUser","registerUser","getAllUsers","getUserInfo","adminController","createAdmin","login","getAdminDetails","taskController","createTask","put","changeStatusToProgress","changeStatusToCompleted","changeStatusToArchived","getAllTasks","commentController","createComment","fetchCommentsAllByTask","delete","deleteComment"],"mappings":"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","file":"routes.js","sourcesContent":["import express from 'express';\nimport controllers from './../controllers';\nimport jwt from 'jsonwebtoken';\nimport db from '../models';\n\nconst routes = express();\n\nfunction verifyToken (req, res, next){\n    // GET THE AUTH HEADER VALUE\n    const bearerHeader = req.headers['authorization'];\n    // check if bearer is undefined\n    if (typeof bearerHeader !== 'undefined') {\n        // verify jwt\n        jwt.verify(bearerHeader, process.env.SECRET_KEY, (err, data)=>{\n            db.User.findById(data.user).then((user)=>{\n                if (user) {\n                    req.user = data.user; \n                    next();             \n                }else{\n                    res.status(403).json({ status: false, message: 'Unauthorized' });\n                }\n            }).catch((err)=>{\n                if (err) { res.status(403).json({ status: false, message: 'Unauthorized' }); }\n            });\n        });\n        \n    } else {\n        //forbiden\n        res.status(403).json({ status: false, message: 'Unauthorized' });\n    }\n}\n\nfunction verifyAdmin(req, res, next) {\n    const bearerHeader = req.headers['authorization'];\n\n    if (typeof bearerHeader !== 'undefined') {\n        jwt.verify(bearerHeader, process.env.SECRET_KEY, (err, data) => {\n            if (err) {\n                res.status(403).json({status: false, message: 'Unauthorized'});\n            } else {\n                db.Admin.findById(data.admin).then(admin => {\n                    if (admin) {\n                        req.admin = data.admin;\n                        next();\n                    } else {\n                        res.status(403).json({status: false, message: 'Unauthorized'});\n                    }\n                });\n            }\n        });\n    } else {\n        res.status(403).json({status: false, message: 'Unauthorized'});\n    }\n}\n\nroutes.get('/', (req, res) => {\n    res.json({status: true});\n});\n\n// user routes\nroutes.post('/user/login', controllers.userController.loginUser);\nroutes.post('/user/register', controllers.userController.registerUser);\nroutes.get('/user/all', controllers.userController.getAllUsers);\nroutes.get('/user/getInfo', verifyToken, controllers.userController.getUserInfo);\n\n// Admin Routes\nroutes.post('/admin/create', controllers.adminController.createAdmin);\nroutes.post('/admin/login', controllers.adminController.login);\nroutes.get('/admin/one', verifyAdmin, controllers.adminController.getAdminDetails);\n\n// Task Routes\nroutes.post('/task/create', verifyAdmin, controllers.taskController.createTask);\nroutes.put('/task/inprogress', verifyToken, controllers.taskController.changeStatusToProgress);\nroutes.put('/task/completed', verifyToken, controllers.taskController.changeStatusToCompleted);\nroutes.put('/task/archive', verifyAdmin, controllers.taskController.changeStatusToArchived);\nroutes.get('/task/all', controllers.taskController.getAllTasks);\n\n// Comment Routes\nroutes.post('/comment/create', verifyToken, controllers.commentController.createComment);\nroutes.post('/comment/fetch', controllers.commentController.fetchCommentsAllByTask);\nroutes.delete('/comment/delete/:id', verifyAdmin, controllers.commentController.deleteComment);\n\nexport default routes;"]}